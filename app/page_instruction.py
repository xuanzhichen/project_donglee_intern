import streamlit as st
import pandas as pd

st.set_page_config(
    layout="centered",
    initial_sidebar_state="expanded",
)


# st.header("快速演示")

# st.markdown("""
#     欢迎使用智能控制器-日志数据分析平台!
# """)

# st.markdown("""
#     当您点击左侧菜单栏中的相关模块（例如 “单设备处理”、“多设备处理”）后，平台将自动为您预加载一份智能控制器的样例日志（即体量经简化过的日志文件），以向您演示处理效果；
#     当上传并覆盖为您感兴趣的日志后，数据分析程序将自动为您重新运行。
# """)

st.header("功能展示")
st.write("欢迎使用智能控制器-日志数据分析平台!")
st.markdown("""
    该平台接受您上传的智能控制器日志文件作为输入，通过在后台调用和自动化执行符合智云产品部业务的、参数自定义的数据处理流水线，
    向您返回 “基于日志的参数统计表” 作为输出（ `.csv` 格式），并在前端为您提供交互式的数据可视化界面。

    以下是 “基于日志的参数统计表” 中近 20 种参数（特征）的定义（双击对应表格可查看完整介绍）：
""")

features = [
    ("device_name/imei", "根据日志文件提取的智能控制器ID"),
    ("上线日期", "在单设备情况下，默认为在给定的日志周期内，控制器每一段 “连续使用时长” 的起始/上线时间点；在多设备情况下，则可根据用户的 “处理模式” 调整，详见下面“多设备处理”板块的介绍"),
    ("下线日期", "在单设备情况下，默认为在给定的日志周期内，控制器每一段 “连续使用时长” 的结束/下线时间点（或当前日志的导出时间）；在多设备情况下，则可根据用户的 “处理模式” 调整，详见下面“多设备处理”板块的介绍"), 
    ("使用天数", "控制器的使用时长，以天为单位"),
    ("实际使用天数", "仅适用于“多设备处理”，且统计 “累积连续使用时长” 的情况（详见下面“多设备处理”板块的介绍）；表示整个日志周期内除去所有中断（离线）以后，控制器的（连续）使用时长，以天为单位"),
    ("使用月数", "控制器的使用时长，以月为单位，不足一个月的不纳入进位"),
    ("实际使用月数", "仅适用于“多设备处理”，且统计 “累积连续使用时长” 的情况（详见下面“多设备处理”板块的介绍）；表示整个日志周期内除去所有中断（离线）以后，控制器的（连续）使用时长，以月为单位，不足一个月的不纳入进位"),
    ("待机次数", "控制器在该段使用时长内的待机总数"),
    ("开闭灌溉次数", "控制器在该段使用时长内，开启或关闭灌溉的总次数；由于开启灌溉和关闭灌溉的记录近似于成对出现，因此简化为仅记录一种情况"),
    ("上下线次数", "控制器在该段使用时长内，上线或下线的总次数；由于上线和下线的记录近似于成对出现，因此简化为仅记录一种情况"),
    ("强信号次数", "控制器在该段使用时长内，信号值在区间 [21.5, 31] 内波动的总次数"),
    ("中信号次数", "控制器在该段使用时长内，信号值在区间 [11.5, 21.5] 内波动的总次数"),
    ("弱信号次数", "控制器在该段使用时长内，信号值在区间 [1.5, 11.5] 内波动的总次数"),
    ("无信号次数", "控制器在该段使用时长内，信号值为区间 [0, 1.5] 内波动的总次数"),
    ("平均信号强度", "控制器在该段使用时长内，信号强度的平均值"),
    ("最大信号强度", "控制器在该段使用时长内，信号强度的最大值"),
    ("最小信号强度", "控制器在该段使用时长内，信号强度的最小值"),
    ("强/中信号切换次数", "控制器在该段使用时长内，在强信号区间和中信号区间之间发生切换的总次数"),
    ("强/弱（无）信号切换次数", "控制器在该段使用时长内，在强信号区间和弱信号区间（或无信号区间）之间发生切换的总次数；由于实际情况中，落在弱信号和无信号区间的样本非常稀疏，因此合并为一种区间情况"),
    ("中/弱（无）无信号切换次数", "控制器在该段使用时长内，在中信号区间和弱信号区间（或无信号区间）之间发生切换的总次数；由于实际情况中，落在弱信号和无信号区间的样本非常稀疏，因此合并为一种区间情况"),
    ("弱/无信号切换次数", "由于实际情况中，落在弱信号和无信号区间的样本非常稀疏，因此不纳入统计，特此说明"),
]

df_features = pd.DataFrame(features, columns=["特征", "简介"])

st.dataframe(df_features, use_container_width=True)

st.subheader("单设备处理")

st.markdown("""
    该模块协助您细致排查某一控制器在其使用周期内（由于更换电池，或设备故障引起的）连续与中断变化，
    并依据时间轴可视化其不同操作类型的切换，以及其信号强度的波动情况。

    具体地，在 “基于日志的参数统计表” 和原日志的基础上，提供以下三方面可视化功能：
    1. **生命周期与使用时长**：追溯日志记录的连续与中断，因为使用时长是在连续状态的基础上计算的
    2. **操作类型与信号强度**：在所有日志连续的区间上，追溯操作类型与信号强度的变化
        - **实时**：展示日志记录尺度内，每一时刻的操作类型或信号强度
        - **日均**：展示每日最频繁的操作类型，或每日的平均信号强度
""")

st.subheader("多设备处理")

st.markdown("""
    该模块协助您批量统计多台控制器的使用时长及对应参数，
    并可视化它们的操作类型和信号强度的频次分布。特别地，考虑到日志普遍存在的中断，为您提供以下三种 “数据处理” 模式：
    - **累积连续使用时长**：统计给定日志周期内，除去所有的中断以后，控制器的连续使用时长总和
    - **最长一次连续使用时长**：在给定日志周期内，提取控制器连续在线最久的一次时长范围
    - **最近一次连续使用时长**：在给定日志周期内，提取控制器最后一次连续在线的时长范围

    具体地，在 “基于日志的参数统计表” 的基础上，提供以下三方面可视化功能：
    1. **生命周期与使用时长**：反映一批控制器的使用时长分布情况
    2. **操作类型与信号强度**：反映一批控制器操作类型与信号强度的频次分布情况
        - **按设备台数显示**：展示在关于操作类型或信号强度频次的不同区间内，控制器数量的占比
        - **按设备序号显示**：按序在展示每台控制器下，不同操作类型或不同信号强度频次的占比
""")

st.subheader("相关性分析")

st.markdown("""
    该模块允许您上传在 “多设备处理” 模块中得到的 “基于日志的参数统计表”，
    并采用基础的机器学习方法（线性回归、非线性决策树）向您挖掘不同特征（参数）之间的相关性。

    示例：控制器的信号强度与使用时长之间的相关性分析
""")

st.header("关于开发")

st.markdown("""
    该平台基于 Python-Streamlit 框架开发，后期方向是考虑与智云公司的 IoT 平台进行衔接。
            
    该目标被划分为三个处理阶段：（代码的）接口与封装，实时数据分析，以及平台部署。因此，此部分内容主要是面向智云产品部内部开发者的工作交接说明。
    源码位于[项目根目录](https://github.com/xuanzhichen/project_donglee_intern)的 `app/` 路径下。
    """)

st.subheader("接口与封装说明")

st.markdown("""
    在后端数据处理方面，以 “单设备处理” 模块为例，路径 `app/demo_data_analysis/` 下的脚本 `demo_data_analysis.py` 展示了简化接口，
    通过读取智能控制器日志文件，以一行代码演示：
    """)
code_0 = """
    # 运行demo: 一行代码执行智能控制器日志数据分析
    run_demo(df_log=pd.read_excel('智能控制器样例日志（简化测试版）.xlsx')) 
"""

st.code(code_0, language="python")

st.markdown("""
    具体的数据处理逻辑如下（仍以 “单设备处理” 为例）：
""")

code_1 = """
    # 数据分析程序的运行逻辑
    def run_demo(df_log):

        # 1. 初始化 “基于日志的参数统计表”（也作为索引bia）
        dfda_log = index_a_dfda_log(df_log)
        dfda_log = define_uptime_and_downtime(dfda_log, df_log)

        # 2. 初始化数据分析对象
        data_analyser = DataAnalyser(dfda_log)

        # 3. 遍历索引表，执行数据分析管道 (pipeline)
        for index, row in dfda_log.iterrows():
            data_analyser.identify_id_info(df_log, index) # 识别设备ID信息
            data_analyser.get_usage_period() # 统计使用时长相关参数
            data_analyser.get_sub_log_based_on_usage_period() # 提取子日志（即连续时长）
            data_analyser.get_operation_status() # 统计操作类型相关参数
            data_analyser.get_signal_strength_frequency() # 统计信号强度相关参数
            data_analyser.get_signal_switch_frequency() # 统计信号切换相关参数

        # 4. 更新 “基于日志的参数统计表”
        dfda_log_updated = data_analyser._df_data_analysis

        # 5. 翻译 “基于日志的参数统计表”
        dfda_log_translated = translate_and_mildly_modify_your_df(dfda_log_updated)

        # 6. 打印 “基于日志的参数统计表”
        print(dfda_log_translated)     
"""
st.code(code_1, language="python", line_numbers=True, height=250)

st.markdown("""
    在前端数据可视化方面，以 “多设备处理” 模块为例，下述路径结构树进一步展示了该项目中源码的封装形式。
    其借助了 Streamlit 平台的第三方容器，采用了开源可视化图表库 —— [ECharts](https://echarts.apache.org/zh/index.html) —— 基于 JavaScript 风格的配置项 (Options)，
    从而尽可能与智云公司 IOT 平台现有的前端开发框架保持一致。
    """)

code_2 = """
app/  # 智能控制器-日志数据分析平台根目录
└── echarts_js_pseudo/  # 前端数据可视化伪代码 (Echarts-JavaScript)
    ├── __init__.py
    ├── single_device_processing/  # 单设备处理
    │   ├── ...
    └── multiple_devices_processing/  # 多设备处理
        ├── options_usage_lifecycle.py  # 生命周期与使用时长-可视化
        ├── options_operation_freq_by_device_amount.py  # 操作类型（按设备台数）-可视化
        ├── options_operation_freq_by_device_id.py  # 操作类型（按设备编号）-可视化
        ├── options_signal_freq_by_device_amount.py  # 信号强度（按设备台数）-可视化
        └── options_signal_freq_by_device_id.py  # 信号强度（按设备编号）-可视化
"""
st.code(code_2, language="text")

st.subheader("实时数据分析（后期方向）")
st.markdown("""
    该平台目前仅支持离线数据分析（即通过用户手动上传日志文件）；后期考虑对接智云公司的 IoT 平台数据库，直接进行日志调取，以实现实时数据分析。
""")
st.subheader("平台部署（后期方向）")
st.markdown("""
    该平台目前部署在社区版的免费公有云上，鉴于数据私有性和系统稳定性等问题，后期考虑将其部署在智云公司的阿里云服务器之上。
""")
